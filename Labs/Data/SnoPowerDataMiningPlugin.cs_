namespace Turbo.Plugins.Jack.Labs.Data
{
    using SharpDX;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Turbo.Plugins.Default;
    using Turbo.Plugins.Jack.Extensions;

    public class SnoPowerDataMiningPlugin : BasePlugin, IInGameTopPainter, IAfterCollectHandler
    {
        private List<ISnoPower> allLegendaryItemsPowers;
        private List<ISnoPower> allLegendaryGemsPowers;
        private List<ISnoPower> allSetBonusPowers;
        private List<ISnoPower> allPlayerPowers;

        private bool allLegendaryItemsPowersDone;
        private bool allLegendaryGemsPowersDone;
        private bool allSetBonusPowersDone;
        private bool allPlayerPowersDone;

        private bool finished;

        private int index;
        private int stepCount;

        private List<ISnoItem> itemList;

        public SnoPowerDataMiningPlugin()
        {
            Enabled = true;

            allLegendaryItemsPowersDone = false;
            allLegendaryGemsPowersDone = false;
            allSetBonusPowersDone = false;
            allPlayerPowersDone = false;

            finished = false;

            index = 0;
            stepCount = 1;
        }

        public override void Load(IController hud)
        {
            base.Load(hud);

            itemList = new List<ISnoItem>();

            //allLegendaryItemsPowers = Hud.Sno.SnoPowers.GetLegendaryItemPowers().ToList();
            allLegendaryItemsPowers = itemList.Where(x => x.LegendaryPower != null).Select(x => x.LegendaryPower).ToList();
            //TODO : fix set mapping
            allSetBonusPowers = Hud.Sno.SnoPowers.AllSetBonusPowers().ToList();
            allLegendaryGemsPowers = Hud.Sno.SnoPowers.GetLegendaryGemPowers().ToList();
            allPlayerPowers = new List<ISnoPower>();
            foreach (HeroClass heroClass in Enum.GetValues(typeof(HeroClass)))
            {
                if (heroClass == HeroClass.None) continue;
                allPlayerPowers.AddRange(Hud.Sno.SnoPowers.GetClassSpecificPowers(heroClass));
            }

            //itemList.Populate(); //before 2.6.1
            itemList = Hud.Sno.GetAllSnoItems().ToList();
        }

        public void AfterCollect()
        {
            //Hud.Debug(Hud.Inventory.GetSnoItem(1663326820).LegendaryPower.Sno.ToString());
        }

		//private bool blacksmithSnoItemDone = false;
        public void PaintTopInGame(ClipState clipState)
        {
            if (finished) return;
            if (clipState != ClipState.BeforeClip) return;
            /**/
            if (Hud.Inventory.HoveredItem != null)
            {
                var h = Hud.Inventory.HoveredItem.SnoItem;
                Says.Debug(h.Sno, h.NameEnglish, h.LegendaryPower != null ? h.LegendaryPower.Sno : 0);
            }
            /**/

            return;
            try
            {
                //Jack.Says.Debug(allLegendaryGemsPowers.Count);
				/**/
                if (!allLegendaryGemsPowersDone)
                {
                    Step(allLegendaryGemsPowers, out allLegendaryGemsPowersDone);
                    return;
                }

                if (!allLegendaryItemsPowersDone)
                {
                    Step(allLegendaryItemsPowers, out allLegendaryItemsPowersDone);
                    return;
                }

                if (!allSetBonusPowersDone)
                {
                    Step(allSetBonusPowers, out allSetBonusPowersDone);
                    return;
                }

                if (!allPlayerPowersDone)
                {
                    Step(allPlayerPowers, out allPlayerPowersDone);
                    return;
                }/**/

                finished = true;
            }
            catch (Exception ex)
            {
                Says.Debug("1:{0} 2:{1} 3:{2} 4:{3}", allLegendaryGemsPowersDone, allLegendaryItemsPowersDone, allPlayerPowersDone, allSetBonusPowersDone);
                Says.Debug("index: {0}", index);
                Says.Error(ex.Message);
            }
        }

        private void Step(IReadOnlyList<ISnoPower> powers, out bool flag)
        {
            var max = Math.Min(powers.Count, index + stepCount);
            for (var i = index; i < max; i++)
            {
                var power = powers[i];

                var result = "OK";
                var itemInfo = new List<string>();
                var itemInfo2 = new List<string>();
                var items = GetItems(power);

                if (items != null)
                {
                    foreach (var item in items)
                    {
                        itemInfo.Add(item.Sno.ToString());
                        itemInfo2.Add(item.Code);
                    }
                }

                if (items != null 
                    && (power.Icons == null || (power.NormalIconTextureId == 0 && power.Icons.All(icon => icon.TextureId == 0))) 
                    && !items.Any())
                {
                    result = "NOK";
                }

                //if (result == "NOK")
                WriteLine(
                    result,
                    power.Sno,
                    power.Code,
                    power.NormalIconTextureId,
                    string.Join("|", power.Icons.Where(icon => icon.TextureId != 0).Select(icon => icon.TextureId.ToString()).Distinct()),
                    string.Join("|", power.IconIndexes.Where(icon => icon != 0).Select(icon => icon.ToString()).Distinct()),
                    string.Join("|", itemInfo),
                    string.Join("|", itemInfo2),
                    power.DescriptionEnglish
                    );

                index++;
            }
            if (index >= powers.Count)
            {
                index = 0;
                flag = true;
                return;
            }

            flag = false;
        }

        private IEnumerable<ISnoItem> GetItems(ISnoPower power)
        {
            var item = itemList.Where(x => x.LegendaryPower != null && x.LegendaryPower.Sno == power.Sno);
            /**/
            if (!item.Any())
            {
                if (power.Code.ToLower().Contains("unique_gem_"))
                {
                    var code = power.Code.Replace("ItemPassive_", string.Empty).Replace("U_", "_");
                    yield return itemList.FirstOrDefault(x => x.Code == code);
                }
                else
                {
				switch (power.Sno)
                    {
                    //P2_ItemPassive_Unique_Ring_051 // bul kathos
                    case 434377:
                        yield return Hud.Inventory.GetSnoItem(1663326820);
                        yield return Hud.Inventory.GetSnoItem(1664512741);
                        break;
                    //ItemPassive_Unique_Ring_578_x1 // Immortal King's
                    case 318760:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Immortal King's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_580_x1 // earth
                    //ItemPassive_Unique_Ring_529_x1
                    case 318762:
                    case 318418:
                        yield return Hud.Inventory.GetSnoItem(2059579422);
                        yield return Hud.Inventory.GetSnoItem(2302982356);
                        yield return Hud.Inventory.GetSnoItem(827195572);
                        yield return Hud.Inventory.GetSnoItem(2314385524);
                        yield return Hud.Inventory.GetSnoItem(260113317);
                        yield return Hud.Inventory.GetSnoItem(3494391925);
                        break;
                    //ItemPassive_Unique_Ring_718_x1
                    case 359563:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Raekor's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_736_x1
                    //ItemPassive_Unique_Ring_737_x1
                    case 359584:
                    case 359585:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("of Akkhan")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_518_x1
                    case 318380:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Danetta's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_716_x1
                    //ItemPassive_Unique_Ring_717_x1
                    //ItemPassive_Unique_Ring_650_x1
                    case 359561:
                    case 359562:
                    case 318832:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Marauder's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_913_x1
                    case 402449:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Natalya's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_680_x1
                    case 318876:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("The Shadow's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Mojo_010_x1
                    //ItemPassive_Unique_Mojo_010_x1_tooltipDummy_1
                    case 360491:
                    case 440744:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Manajuma")))
                        {
                            yield return _item;
                        }
                        break;
                    //P2_ItemPassive_Unique_Ring_055
                    //ItemPassive_Unique_Ring_726_x1
                    case 434967:
                    case 359573:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Jade Harvester's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_596_x1
                    case 318778:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Zunimassa's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_727_x1
                    case 359574:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Vyr's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_710_x1
                    case 359555:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Tal Rasha's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_713_x1
                    case 359558:
                        foreach (var _item in itemList.Where(x => x.NameEnglish.Contains("Asheara's")))
                        {
                            yield return _item;
                        }
                        break;
                    //ItemPassive_Unique_Ring_711_x1
                    case 359556:
                        yield return Hud.Inventory.GetSnoItem(1528526556);

                        break;

                    default:

                        break;
                }
                }
            }
            else
            {
                foreach (var _item in item)
                {
                    yield return _item;
                }
            }
            /**/
        }

        private void WriteLine(params object[] param)
        {
            var text = string.Join(" ", param);
            Says.Debug(text);

            text = "\t" + string.Join("\t", param);
            Hud.TextLog.Log("SnoPowerDataMiningPlugin.out.tsv", text, true);
        }
    }
}